<?php

namespace Data\Proxy\__CG__\Data\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Person extends \Data\Entity\Person implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'id', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'name', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'birthDate', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'sales', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'createdBy', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'createdAt', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'updateBy', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'updateAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'id', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'name', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'birthDate', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'sales', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'createdBy', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'createdAt', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'updateBy', '' . "\0" . 'Data\\Entity\\Person' . "\0" . 'updateAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Person $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setBirthDate($birthDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBirthDate', [$birthDate]);

        return parent::setBirthDate($birthDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getBirthDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthDate', []);

        return parent::getBirthDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateBy($updateBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateBy', [$updateBy]);

        return parent::setUpdateBy($updateBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateBy', []);

        return parent::getUpdateBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateAt($updateAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateAt', [$updateAt]);

        return parent::setUpdateAt($updateAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateAt', []);

        return parent::getUpdateAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addSale(\Data\Entity\Sale $sales)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSale', [$sales]);

        return parent::addSale($sales);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSale(\Data\Entity\Sale $sales)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSale', [$sales]);

        return parent::removeSale($sales);
    }

    /**
     * {@inheritDoc}
     */
    public function getSales()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSales', []);

        return parent::getSales();
    }

    /**
     * {@inheritDoc}
     */
    public function created()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'created', []);

        return parent::created();
    }

    /**
     * {@inheritDoc}
     */
    public function updated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updated', []);

        return parent::updated();
    }

}
